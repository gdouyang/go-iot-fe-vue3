{"id":"onenet-lamp","name":"移动OneNet路灯","typeId":"","networkType":"HTTP_SERVER","metadata":"{\"functions\":[{\"id\":\"switching\",\"name\":\"开关\",\"async\":false,\"inputs\":[{\"id\":\"status\",\"name\":\"状态\",\"type\":\"enum\",\"elements\":[{\"text\":\"开灯\",\"value\":\"on\"},{\"text\":\"关灯\",\"value\":\"off\"}]}],\"output\":null},{\"id\":\"dimming\",\"name\":\"调光\",\"async\":false,\"inputs\":[{\"id\":\"bright\",\"name\":\"亮度\",\"type\":\"int\",\"unit\":\"\"}],\"output\":null},{\"id\":\"strategy\",\"name\":\"策略\",\"async\":false,\"inputs\":[{\"id\":\"strategy\",\"name\":\"策略\",\"type\":\"string\",\"max\":0}],\"output\":null},{\"id\":\"timing\",\"name\":\"校时\",\"async\":false,\"inputs\":null,\"output\":null}],\"events\":null,\"properties\":[{\"id\":\"light\",\"name\":\"亮度\",\"type\":\"int\",\"expands\":{\"readOnly\":\"true\"},\"unit\":\"\"},{\"id\":\"current\",\"name\":\"电流\",\"type\":\"double\",\"expands\":{\"readOnly\":\"true\"},\"scale\":2,\"unit\":\"milliAmpere\"},{\"id\":\"voltage\",\"name\":\"电压\",\"type\":\"double\",\"expands\":{\"readOnly\":\"true\"},\"scale\":2,\"unit\":\"volt\"},{\"id\":\"power\",\"name\":\"功率\",\"type\":\"double\",\"expands\":{\"readOnly\":\"true\"},\"scale\":2,\"unit\":\"watt\"}]}","state":true,"storePolicy":"es","script":"// 检查在线状态\r\nfunction OnStateChecker(context) {\r\n  // unknown, online, offline;\r\n  // 获取页面上配置的地址与apiKey\r\n  var url= context.GetConfig('apiAddress')\r\n  var resp = globe.HttpRequest({\r\n    method: 'get',\r\n    url: url + '/devices/getbyimei?imei='+ context.GetDevice().Id,\r\n    headers: {'Authorization': getAuthorization(context)},\r\n  })\r\n  if (resp.status \u003e= 200 \u0026\u0026 resp.status \u003c 300) {\r\n    console.log(resp.data);\r\n    var body = JSON.parse(resp.data);\r\n    if (body.errno != 0) {\r\n      return \"offline\"\r\n    }\r\n    if (body.data.online) {\r\n      return \"online\"\r\n    }\r\n  }\r\n  return \"offline\"\r\n}\r\nfunction getAuthorization(context) {\r\n  var version = \"2018-10-31\";\r\n  var resourceName = \"products/8001495\"; // 这里需要替换具体的oneNet产品id\r\n  var expirationTime = Number(new Date().getTime() / 1000 + 100 * 24 * 60 * 60).toFixed();\r\n  var signatureMethod = \"sha1\";\r\n  var accessKey = context.GetConfig('accessKey');\r\n\r\n  var res = encodeURIComponent(resourceName);\r\n  var encryptText = expirationTime + \"\\n\" + signatureMethod + \"\\n\" + resourceName + \"\\n\" + version;\r\n  var str = globe.HmacEncryptBase64(encryptText, accessKey, signatureMethod);\r\n  var sig = encodeURIComponent(str);\r\n  return \"version=\" + version + \"\u0026res=\" + res + \"\u0026et=\" + expirationTime+\"\u0026method=\"+signatureMethod+\"\u0026sign=\"+sig;\r\n}\r\n// 设备激活时同步到OneNet平台\r\nfunction OnDeviceDeploy(context) {\r\n  var url= context.GetConfig('apiAddress')\r\n  var device = context.GetDevice()\r\n  var auth_info = {}\r\n  auth_info[device.Id] = device.Id\r\n  var resp = globe.HttpRequest({\r\n    method: 'post',\r\n    url: url + '/devices',\r\n    data: {\r\n      title: device.Name,\r\n      protocol: 'LWM2M',\r\n      auth_info: auth_info\r\n    },\r\n    headers: {'Authorization': getAuthorization(context)},\r\n  })\r\n  console.log(resp)\r\n  if (resp.status \u003e= 200 \u0026\u0026 resp.status \u003c 300) {\r\n    console.log(resp.data);\r\n    var body = JSON.parse(resp.data);\r\n    if (body.errno != 0) {\r\n      if (body.errno == 6) {// 如果OneNet平台已存在\r\n        return;\r\n      }\r\n      throw new Error(\"同步OnNet失败 errno:\"+body.error)\r\n    }\r\n    var device_id = body.data.device_id\r\n    device.SetConfig(\"deviceId\", device_id)\r\n    return;\r\n  }\r\n  throw new Error(\"同步OnNet失败\"+resp.message)\r\n}\r\n// 设备禁用时同步OneNet平台删除\r\nfunction OnDeviceUnDeploy(context) {\r\n  var url= context.GetConfig('apiAddress')\r\n  var device = context.GetDevice()\r\n  var device_id = device.GetConfig('deviceId')\r\n  if (!device_id) {\r\n    device_id = device.Id\r\n  }\r\n  var resp = globe.HttpRequest({\r\n    method: 'delete',\r\n    url: url + '/devices/' + device_id,\r\n    headers: {'Authorization': getAuthorization(context)},\r\n  })\r\n  if (resp.status \u003e= 200 \u0026\u0026 resp.status \u003c 300) {\r\n    console.log(resp.data);\r\n    var body = JSON.parse(resp.data);\r\n    if (body.errno != 0 \u0026\u0026 body.errno != 3) {\r\n      throw new Error(\"同步OnNet失败 errno:\"+body.error)\r\n    }\r\n    return;\r\n  }\r\n  throw new Error(\"同步OnNet失败\"+resp.message)\r\n}\r\n/**\r\n * 2：设备上下线消息\r\n */\r\nvar ONLINE_OFFLINE = 2;\r\n/**\r\n * 1：设备上线\r\n */\r\nvar ONLINE = \"1\";\r\n/**\r\n * 0：设备下线\r\n */\r\nvar OFFLINE = \"0\";\r\n// 设备报文 -\u003e 物模型\r\nfunction OnMessage(context) {\r\n  var str = context.MsgToString();\r\n  console.log(str)\r\n  var data = JSON.parse(str);\r\n  var msg = data.msg;\r\n  var imei = msg.imei;\r\n  var msgType = msg.type;\r\n  // 处理上线消息\r\n  if (ONLINE_OFFLINE == msgType) {\r\n    var status = msg.status;\r\n    if (ONLINE == status) {\r\n      context.DeviceOnline(imei)\r\n      return;\r\n    } else if (OFFLINE == status) {\r\n      // context.DeviceOnline(imei)\r\n      return;\r\n    }\r\n  }\r\n  context.GetDeviceById(imei)\r\n\r\n  var value = msg.value;\r\n  var entity = new MsgEntity(value);\r\n  var msgHeader = entity.header;\r\n  var value1 = msgHeader.msgType.value;\r\n  if (MsgType.心跳消息.equals(value1) || MsgType.上行接入请求.equals(value1)) {\r\n    console.log(\"心跳消息\" + MsgType.心跳消息.equals(value1) + \"上行接入请求\" + MsgType.上行接入请求.equals(value1))\r\n    // 灯控器心中、上行接入时需要返回ack不然会断开连接\r\n    console.log(\"灯控器心中、上行接入时需要返回ack不然会断开连接\")\r\n    doAck(context, imei, msgHeader);\r\n  }\r\n  // 心跳消息中包含了亮度、电流、电压、功率\r\n  if (MsgType.心跳消息.equals(value1)) {\r\n    var light = entity.getNextIntegerWord(); // 亮度 0表示关闭\r\n    var current = entity.getNextIntegerWord(); // 电流 单位mA\r\n    var voltage = entity.getNextIntegerWord(); // 电压 V\r\n    var power = entity.getNextIntegerWord(); // 功率 W\r\n    var json = {\r\n      deviceId: imei,\r\n      light: light,\r\n      current: current,\r\n      voltage: voltage,\r\n      power: power\r\n    };\r\n    context.SaveProperties(json)\r\n  }\r\n}\r\n// 物模型 -\u003e 设备报文\r\nfunction OnInvoke(context) {\r\n  var message = context.GetMessage();\r\n  if (!message.FunctionId) {\r\n    throw new Error('只支持设备功能调用');\r\n  }\r\n  var functionId = message.FunctionId;\r\n  var messageId = \"1\"//message.Id();\r\n  var invoke = new FunctionInvokeUtil(context);\r\n  var result = null;\r\n  if (functionId == \"timing\") {\r\n    result = invoke.timing();\r\n  } else if (functionId == \"switching\") {\r\n    result = invoke.switching(message);\r\n  } else if (functionId == \"dimming\") {\r\n    result = invoke.dimming(message);\r\n  } else if (functionId == \"strategy\") {\r\n    result = invoke.strategy(message);\r\n  } else {\r\n    throw new Error(functionId + '无效功能ID');\r\n  }\r\n  var resp = sendToOneNet(context, message.DeviceId, {'args': result});\r\n  if (resp.status == 200) {\r\n    // 发送成功后要处理回复\r\n    context.ReplyOk()\r\n  } else {\r\n    context.ReplyFail(resp.message)\r\n  }\r\n}\r\n\r\nfunction doAck(context, imei, msgHeader) {\r\n  var value1 = msgHeader.msgType.value;\r\n  var args = '';\r\n  if (MsgType.上行接入请求.equals(value1)) {\r\n    args = new FunctionInvokeUtil(context).connectResp();\r\n  } else if (MsgType.心跳消息.equals(value1)) {\r\n    args = new FunctionInvokeUtil(context).heartbeatResp(msgHeader);\r\n  }\r\n  sendToOneNetAsync(context, imei, {'args': args});\r\n}\r\n\r\n// 发送指令给移动平台\r\nfunction sendToOneNet(context, imei, data) {\r\n  // 获取页面上配置的地址与apiKey\r\n  var url= context.GetConfig('apiAddress')\r\n  return globe.HttpRequest({\r\n    method: 'post',\r\n    url: url + '/nbiot/execute?imei='+ imei +'\u0026obj_id=3200\u0026obj_inst_id=0\u0026res_id=5505',\r\n    data: data,\r\n    headers: {'Authorization': getAuthorization(context)},\r\n  })\r\n}\r\nfunction sendToOneNetAsync(context, imei, data) {\r\n  // 获取页面上配置的地址与apiKey\r\n  var url= context.GetConfig('apiAddress')\r\n  globe.HttpRequestAsync({\r\n    method: 'post',\r\n    url: url + '/nbiot/execute?imei='+ imei +'\u0026obj_id=3200\u0026obj_inst_id=0\u0026res_id=5505',\r\n    data: data,\r\n    headers: {'Authorization': getAuthorization(context)},\r\n    complete: function(resp) {\r\n      console.log(resp)\r\n    }\r\n  })\r\n}\r\n\r\nfunction FunctionInvokeUtil(context) {\r\n  this.context = context\r\n  // 开关\r\n  this.switching = function(message) {\r\n    var status = message.Data.status;\r\n    if (\"on\" == status) {\r\n      return CmdUtil.getCmdMsg(this.context, MsgType.开关灯调光, CmdUtil.getHexStr(10, 1), null);\r\n    } else {\r\n      return CmdUtil.getCmdMsg(this.context, MsgType.开关灯调光, CmdUtil.getHexStr(0, 1), null);\r\n    }\r\n  }\r\n  // 调光\r\n  this.dimming = function(message) {\r\n    var data = message.Data.bright ? message.Data.bright : 0;\r\n    return CmdUtil.getCmdMsg(this.context, MsgType.开关灯调光, CmdUtil.getHexStr(parseInt(data), 1), null);\r\n  }\r\n  // 设置策略\r\n  this.strategy = function(message) {\r\n    var data = message.Data.strategy\r\n    if (data) {\r\n      var dateStr = \"\";\r\n      // 时-分-亮度,...,...：\"18-30-30,20-30-80,5-30-50,6-30-0\"\r\n      var strategyS = data.split(\",\");\r\n      for(var i = 0; i \u003c strategyS.length; i++) {\r\n        var s = strategyS[i];\r\n        var strategy = s.split(\"-\");\r\n        for(var j = 0; j \u003c strategy.length; j++) {\r\n          var t = strategy[j];\r\n          dateStr += CmdUtil.getHexStr(parseInt(t), 1);\r\n        }\r\n      }\r\n      return CmdUtil.getCmdMsg(this.context, MsgType.设置策略, dateStr, strategyS.length * 3);\r\n    }\r\n  }\r\n  // 校时\r\n  this.timing = function () {\r\n    return this.resp(MsgType.校时);\r\n  }\r\n  // 接入应答\r\n  this.connectResp = function () {\r\n    return this.resp(MsgType.接入应答);\r\n  }\r\n  // 下行ACK\r\n  this.heartbeatResp = function (msgHeader) {\r\n    return CmdUtil.getCmdMsg(this.context, MsgType.下行ACK, msgHeader.pktNum.hex, null);\r\n  }\r\n  // 应答\r\n  this.resp = function(msgType) {\r\n    var date = new Date();\r\n    var year = (date.getFullYear() + \"\").substring(2);\r\n    var dateStr = CmdUtil.getHexStr(parseInt(year), 1);\r\n    dateStr += CmdUtil.getHexStr(date.getMonth() + 1, 1);\r\n    dateStr += CmdUtil.getHexStr(date.getDate(), 1);\r\n    dateStr += CmdUtil.getHexStr(date.getHours(), 1);\r\n    dateStr += CmdUtil.getHexStr(date.getMinutes(), 1);\r\n    dateStr += CmdUtil.getHexStr(date.getSeconds(), 1);\r\n    return CmdUtil.getCmdMsg(this.context, msgType, dateStr, null);\r\n  }\r\n}\r\n\r\nfunction CmdUtil() {\r\n}\r\nCmdUtil.getCmdMsg = function(context, msgType, msgData, len) {\r\n  var version = \"0100\";\r\n  var msgLen = len !== null ? CmdUtil.getHexStr(len,2) : msgType.lenHex;\r\n  var msgHead = version + CmdUtil.getPktNum(context) + msgType.codeHex + msgLen;\r\n  var msgCrc16 = globe.ToCrc16Str(msgHead + msgData);\r\n\r\n  return (msgHead + msgData + msgCrc16).toUpperCase();\r\n}\r\nCmdUtil.getHexStr = function(value, size) {\r\n  // 十进制转十六进制，并补齐四位\r\n  var hexStr = value.toString(16);\r\n  while (hexStr.length \u003c 4) {\r\n    hexStr = \"0\" + hexStr;\r\n  }\r\n  // 前后置位\r\n  hexStr = hexStr.substring(2, 4) + hexStr.substring(0, 2);\r\n  // 按需返回\r\n  return hexStr.substring(0, size * 2);\r\n}\r\n\r\nCmdUtil.getPktNum = function(context) {\r\n  var pktNum = context.GetDevice().GetData(\"pktNum\");\r\n  if (pktNum) {\r\n    pktNum = parseInt(pktNum, 10);\r\n    pktNum = pktNum + 1;\r\n  } else {\r\n    pktNum = 0;\r\n  }\r\n  context.GetDevice().SetData(\"pktNum\", pktNum);\r\n  return CmdUtil.getHexStr(pktNum, 2);\r\n}\r\n\r\nfunction MsgEntity(text) {\r\n  var header = text.substring(0, 16);\r\n  var msgHeader = new MsgHeader(header);\r\n  var length = msgHeader.msgLen.value;\r\n  var endIndex = 16 + (length * 2);\r\n\r\n  this.body = text.substring(16, endIndex);\r\n  this.header = msgHeader;\r\n  this.offset = 0;\r\n\r\n  this.resetOffset = function () {\r\n    this.offset = 0;\r\n  }\r\n\r\n  this.getNextIntegerBYTE = function () {\r\n    return parseInt(this.getNextByte(), 16);\r\n  }\r\n\r\n  this.getNextWord = function () {\r\n    var high = this.getNextByte();\r\n    var low = this.getNextByte();\r\n    return low + high;\r\n  }\r\n\r\n  this.getNextByte = function () {\r\n    var endIndex = this.offset + 2;\r\n    if (endIndex \u003e this.body.length) {\r\n        return null;\r\n    }\r\n    var str = this.body.substring(this.offset, endIndex);\r\n    this.offset = endIndex;\r\n    return str;\r\n  }\r\n\r\n  this.getNextIntegerWord = function () {\r\n    return parseInt(this.getNextWord(), 16);\r\n  }\r\n}\r\n\r\nfunction MsgHeader(header) {\r\n  var versionStr = header.substring(0, 4);\r\n  var pktNumStr = header.substring(4, 8); // 序列号，递增\r\n  var msgTypeStr = header.substring(8, 12); // 消息类型\r\n  var msgLenStr = header.substring(12, 16); // 消息体长度\r\n\r\n  this.version = new DataTypeWord(versionStr);\r\n  this.pktNum = new DataTypeWord(pktNumStr);\r\n  this.msgType = new DataTypeWord(msgTypeStr);\r\n  this.msgLen = new DataTypeWord(msgLenStr);\r\n}\r\n\r\nfunction DataTypeWord(text) {\r\n  this.hex = text; // string\r\n\r\n  this.highBit = text.substring(2, 4); // string\r\n  this.lowBit = text.substring(0, 2); // string\r\n  this.value = parseInt(this.highBit + this.lowBit, 16); // int\r\n\r\n}\r\n\r\nfunction MsgType(typeCode, desc, codeHex, lenHex) {\r\n  this.typeCode = typeCode;\r\n  this.typeDesc = desc;\r\n  this.codeHex = codeHex;\r\n  this.lenHex = lenHex;\r\n\r\n  this.equals = function(code) {\r\n    return this.typeCode == code;\r\n  }\r\n}\r\n// 上行消息类型\r\nMsgType.上行ACK = new MsgType(1, \"上行ACK\", \"0100\", \"\");\r\nMsgType.上行NACK = new MsgType(2, \"上行NACK\", \"0200\", \"\");\r\nMsgType.上行接入请求 = new MsgType(3, \"上行接入请求\", \"0300\", \"\");\r\nMsgType.心跳消息 = new MsgType(4, \"心跳消息\", \"0400\", \"\");\r\nMsgType.终端电参数消息应答 = new MsgType(5, \"终端电参数消息应答\", \"0500\", \"\");\r\nMsgType.终端上行通信参数获取应答 = new MsgType(6, \"终端上行通信参数获取应答\", \"0600\", \"\");\r\nMsgType.终端通信网络信息应答 = new MsgType(7, \"终端通信网络信息应答\", \"0700\", \"\");\r\nMsgType.调光模式获取应答 = new MsgType(8, \"调光模式获取应答\", \"0800\", \"\");\r\nMsgType.获取策略请求应答 = new MsgType(9, \"获取策略请求应答\", \"0900\", \"\");\r\nMsgType.上行升级报文 = new MsgType(100, \"上行升级报文\", \"6400\", \"\");\r\n// 下行消息类型\r\nMsgType.下行ACK = new MsgType(1001, \"下行ACK\", \"E903\", \"0200\");\r\nMsgType.下行NACK = new MsgType(1002, \"下行ACK\", \"EA03\", \"\");\r\nMsgType.开关灯调光 = new MsgType(1003, \"开关灯调光\", \"EB03\", \"0100\");\r\nMsgType.设置策略 = new MsgType(1004, \"设置策略\", \"EC03\", \"0300\");\r\nMsgType.配置还原 = new MsgType(1005, \"配置还原\", \"ED03\", \"\");\r\nMsgType.获取调光模式 = new MsgType(1006, \"获取调光模式\", \"EE03\", \"\");\r\nMsgType.设置调光模式 = new MsgType(1007, \"设置调光模式\", \"EF03\", \"\");\r\nMsgType.复位重启 = new MsgType(1008, \"设置调光模式\", \"F003\", \"\");\r\nMsgType.设置终端上行通信参数 = new MsgType(1009, \"设置终端上行通信参数\", \"F103\", \"\");\r\nMsgType.获取终端电参数信息 = new MsgType(1010, \"获取终端电参数信息\", \"F203\", \"\");\r\nMsgType.获取终端上行通信参数 = new MsgType(1011, \"获取终端上行通信参数\", \"F303\", \"\");\r\nMsgType.获取终端通信网络信息 = new MsgType(1012, \"获取终端通信网络信息\", \"F403\", \"\");\r\nMsgType.校时 = new MsgType(1013, \"校时\", \"F503\", \"F5030600\");\r\nMsgType.接入应答 = new MsgType(1014, \"接入应答\", \"F603\", \"0600\");\r\nMsgType.获取策略请求 = new MsgType(1015, \"获取策略请求\", \"F703\", \"\");\r\nMsgType.下行升级报文 = new MsgType(1100, \"下行升级报文\", \"4C04\", \"\");\r\n","codecId":"script_codec","desc":"","createId":1,"createTime":"2023-12-29 20:22:47","metaconfig":[{"property":"apiAddress","type":"string","value":"http://api.heclouds.com","desc":"移动OneNet api地址"},{"property":"deviceId","type":"string","desc":"onenet平台设备Id"},{"property":"accessKey","type":"password","value":"MaNp74IxAikaEvbbovZ2S3qSKWJycHOWFmYEDj8ZlMQ=","desc":"oneNet平台产品access_key"}]}